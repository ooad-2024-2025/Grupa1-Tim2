@{
    ViewData["Title"] = "Pronađi vozače";
}

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #d4f4dd;
        margin: 20px;
    }

    #map {
        height: 400px;
        width: 70%;
        float: left;
        border-radius: 10px;
        margin-top: 20px;
        background-color: white;
    }

    #driver-list {
        width: 28%;
        float: right;
        padding-left: 2%;
        margin-top: 20px;
        background-color: white;
        border-radius: 10px;
        padding: 15px;
        box-sizing: border-box;
    }

    .driver-item {
        background-color: #f8f8f8;
        padding: 10px;
        margin-bottom: 10px;
        border-radius: 8px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }

    .order-button {
        background-color: #2ecc71;
        color: white;
        border: none;
        padding: 6px 12px;
        border-radius: 5px;
        cursor: pointer;
        margin-top: 8px;
    }

        .order-button:hover {
            background-color: #27ae60;
        }

    #location-container {
        background-color: #b8e4bb;
        padding: 20px 25px;
        border-radius: 8px;
        margin-bottom: 30px;
        display: inline-block;
    }

    h2 {
        margin-bottom: 10px;
    }

    #locationInput, #destinationInput {
        width: 300px;
        padding: 8px;
        margin-right: 10px;
        border-radius: 5px;
        border: 1px solid #ccc;
        font-size: 1rem;
    }

    /* Global styles for notification sections - IMPROVED FOR OVERLAY */
    #rating-section,
    #ride-accepted-section,
    #ride-rejected-section,
    #general-notification-section { /* Added general-notification-section for generic messages */
        background-color: #fff;
        border: 1px solid #ccc;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        text-align: center;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 1000;
        max-width: 90%;
        width: 450px;
        min-width: 300px;
        display: none; /* Initially hidden */
    }

    /* Stil za preklapanje pozadine */
    .overlay-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 999;
        display: none; /* Inicijalno sakriveno */
    }

    .star {
        font-size: 32px;
        cursor: pointer;
        color: lightgray;
        transition: color 0.2s;
    }

        .star.selected {
            color: gold;
        }

    #komentar {
        width: calc(100% - 20px);
        min-height: 80px;
        margin-top: 15px;
        border-radius: 6px;
        padding: 10px;
        border: 1px solid #ccc;
        font-family: inherit;
        font-size: 1rem;
    }

    /* Override .order-button for specific use in notification sections if needed */
    #rating-section .order-button,
    #ride-accepted-section .order-button,
    #ride-rejected-section .order-button,
    #general-notification-section .order-button { /* Added for general notifications */
        padding: 10px 20px;
        font-size: 1rem;
        margin-top: 15px;
    }

    #findBtn, #locateBtn {
        padding: 8px 12px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1rem;
        font-family: inherit;
        color: white;
        transition: background-color 0.3s ease;
    }

    #findBtn {
        background-color: #3498db;
    }

        #findBtn:hover {
            background-color: #2980b9;
        }

    #locateBtn {
        background-color: #7f8c8d;
    }

        #locateBtn:hover {
            background-color: #636e72;
        }
</style>

<h2>Unesite svoju lokaciju</h2>
<div id="location-container">
    <input type="text" id="locationInput" placeholder="npr. Pofalići" />
    <input type="text" id="destinationInput" placeholder="npr. Baščaršija (opcionalno)" />
    <button id="findBtn" onclick="PrikazSlobodnihVozaca()">Pronađi vozače</button>
    <button id="locateBtn" type="button">Pronađi moju lokaciju</button>
</div>

<div>
    <div id="map"></div>
    <div id="driver-list"><h3>Vozači u blizini</h3></div>
</div>

<div id="overlay-backdrop" class="overlay-backdrop"></div>

<div id="ride-accepted-section">
    <hr />
    <h4 id="ride-accepted-message"></h4>
    <button class="order-button mt-2" onclick="hideNotification('ride-accepted-section')">OK</button>
</div>

<div id="ride-rejected-section">
    <hr />
    <h4 id="ride-rejected-message"></h4>
    <button class="order-button mt-2" onclick="hideNotification('ride-rejected-section')">Razumijem</button>
</div>

<div id="rating-section">
    <hr />
    <h4 style="margin-bottom: 10px;">Molimo Vas da ostavite ocjenu za vozača:</h4>
    <div id="star-rating">
        @for (int i = 1; i <= 5; i++)
        {
            <span class="star" data-value="@i">&#9734;</span>
        }
    </div>
    <textarea id="komentar" placeholder="Komentar..."></textarea>
    <button class="order-button" onclick="submitRating()">Pošalji ocjenu</button>
</div>

<div id="general-notification-section">
    <hr />
    <h4 id="general-notification-message"></h4>
    <button class="order-button mt-2" onclick="hideNotification('general-notification-section')">Zatvori</button>
</div>


<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>

<script>
    let map;
    let userMarker;
    let driverMarkers = [];
    let dostupniVozači = [];
    let selectedRating = 0;
    let vozacIdZavrseneVoznje = null;

    const overlayBackdrop = document.getElementById("overlay-backdrop"); // Dohvati backdrop element

    // Univerzalna funkcija za prikaz notifikacije
    function showNotification(sectionId, message, isError = false) {
        const notificationSection = document.getElementById(sectionId);
        const messageElement = notificationSection.querySelector('h4'); // Pretpostavljamo da je h4 unutar sekcije

        // Poseban slučaj za rating-section, gdje poruka ide u h4 unutar njega
        if (sectionId === 'rating-section') {
             // Poruka za rating-section je fiksna, ne mijenja se dinamički u h4
        } else {
            messageElement.innerText = message;
        }

        notificationSection.style.display = "block";
        overlayBackdrop.style.display = "block"; // Prikaži backdrop

        // Prilagodi boju za greške
        if (isError) {
            notificationSection.style.borderColor = "#dc3545";
            messageElement.style.color = "#dc3545";
        } else {
            notificationSection.style.borderColor = "#28a745"; // Default zeleno/uspjeh
            messageElement.style.color = "#212529"; // Default boja teksta
        }
    }

    //  skrivanje notifikacije
    function hideNotification(sectionId) {
        document.getElementById(sectionId).style.display = "none";
        // Resetuj poruku samo za sekcije koje je dinamički mijenjaju
        if (sectionId !== 'rating-section') {
            document.getElementById(sectionId).querySelector('h4').innerText = "";
        }

        overlayBackdrop.style.display = "none"; // Sakrij backdrop
    }


    // --- SignalR Klijent za Putnika ---
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/notificationHub")
        .withAutomaticReconnect()
        .build();


    connection.on("VoznjaPrihvacena", (rideData) => {
        console.log("Vožnja prihvaćena (putnik):", rideData);

        // Pronađi vozača iz liste dostupnih
        const vozac = dostupniVozači.find(v => v.id === rideData.vozacId);
        let etaText = "";

        if (vozac && userMarker) {
            const distance = getDistance(userMarker.getLatLng().lat, userMarker.getLatLng().lng, vozac.latitude, vozac.longitude);
            const eta = getETA(distance);
            etaText = ` Procijenjeno vrijeme dolaska: ${eta} min.`;
        }

        const poruka = `🎉 Vozač ${rideData.vozacUserName} je prihvatio vašu vožnju (ID: ${rideData.rideId})! Vaša vožnja je prihvaćena i vozač dolazi po vas!${etaText}`;
        showNotification("ride-accepted-section", poruka);
    });


    connection.on("VoznjaOdbijena", (rideData) => {
        console.log("Vožnja odbijena (putnik):", rideData);
        showNotification("ride-rejected-section", `😔 ${rideData.poruka} (ID vožnje: ${rideData.rideId}). Molimo pokušajte ponovo ili odaberite drugog vozača.`, true); // True za grešku
    });

    connection.on("VoznjaZavrsena", (rideData) => {
        console.log("Vožnja završena (putnik):", rideData);
        vozacIdZavrseneVoznje = rideData.vozacId;
        showNotification("rating-section", "Molimo Vas da ostavite ocjenu za vozača:"); // Ova funkcija će samo prikazati sekciju
    });


    async function startSignalRConnectionForPassenger() {
        try {
            await connection.start();
            console.log("SignalR Connected for Passenger.");
        } catch (err) {
            console.error("SignalR Connection Error for Passenger: ", err);
            setTimeout(startSignalRConnectionForPassenger, 5000);
        }
    }

    startSignalRConnectionForPassenger();
    // --- Kraj SignalR Klijenta za Putnika ---

    document.querySelectorAll(".star").forEach(star => {
        star.addEventListener("click", function () {
            selectedRating = this.getAttribute("data-value");
            document.querySelectorAll(".star").forEach(s => s.classList.remove("selected"));
            for (let i = 0; i < selectedRating; i++) {
                document.querySelectorAll(".star")[i].classList.add("selected");
            }
        });
    });


    function submitRating() {
        const komentar = document.getElementById("komentar").value;

        if (selectedRating === 0 || !vozacIdZavrseneVoznje) {
            showNotification("general-notification-section", "Molimo odaberite ocjenu prije slanja.", true); // Zamijenjen alert
            return;
        }

        fetch('/api/ocjena/create', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                ocjena: selectedRating,
                komentar: komentar,
                KorisnikId: vozacIdZavrseneVoznje
            })
        }).then(response => {
            if (response.ok) {
                showNotification("general-notification-section", "Ocjena uspješno poslana."); // Zamijenjen alert
                hideNotification("rating-section"); // Sakrij rating sekciju
            } else {
                showNotification("general-notification-section", "Greška prilikom slanja ocjene.", true); // Zamijenjen alert
            }
        });
    }


    async function PrikazSlobodnihVozaca() {
        const location = document.getElementById("locationInput").value.trim();

        if (!location) {
            showNotification("general-notification-section", "Molimo unesite lokaciju.", true); // Zamijenjen alert
            return;
        }

        try {
            const geoResponse = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(location)}`);
            const geoData = await geoResponse.json();

            if (geoData.length === 0) {
                showNotification("general-notification-section", "Lokacija nije pronađena.", true); // Zamijenjen alert
                return;
            }

            const userLat = parseFloat(geoData[0].lat);
            const userLng = parseFloat(geoData[0].lon);

            if (!map) {
                map = L.map('map').setView([userLat, userLng], 14);
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '&copy; OpenStreetMap contributors'
                }).addTo(map);
            } else {
                map.setView([userLat, userLng], 14);
            }

            if (userMarker) {
                userMarker.setLatLng([userLat, userLng]);
            } else {
                userMarker = L.marker([userLat, userLng]).addTo(map).bindPopup("Vaša lokacija").openPopup();
            }

            const driverResponse = await fetch(`/Vozac/PrikazSlobodnihVozaca?location=${encodeURIComponent(location)}`);
            const driversData = await driverResponse.json();

            showNearbyDrivers(userLat, userLng, driversData);

        } catch (error) {
            console.error("Greška:", error);
            showNotification("general-notification-section", "Greška prilikom pretrage vozača.", true); // Zamijenjen alert
        }
    }

    function showNearbyDrivers(userLat, userLng, drivers) {
        const list = document.getElementById("driver-list");
        list.innerHTML = "<h3>Vozači u blizini</h3>";

        driverMarkers.forEach(m => map.removeLayer(m));
        driverMarkers = [];

        const dostupni = drivers.filter(driver => driver.dostupnost === 1); // Pretpostavka da je 1 = Dostupan
        dostupniVozači = dostupni;

        if (dostupni.length === 0) {
            list.innerHTML += "<p>Nema dostupnih vozača.</p>";
            return;
        }

        dostupni.forEach(driver => {
            if (driver.latitude == null || driver.longitude == null) return;

            const distance = getDistance(userLat, userLng, driver.latitude, driver.longitude);

            if (distance <= 50) { // Unutar 50 km
                const marker = L.marker([driver.latitude, driver.longitude]).addTo(map).bindPopup(driver.name);
                driverMarkers.push(marker);

                const item = document.createElement("div");
                item.className = "driver-item";
                item.innerHTML = `
                    <strong>${driver.name}</strong> (${distance.toFixed(2)} km)<br/>
                    <button class="order-button" onclick="naruciVoznju('${driver.id}', '${driver.name}')">Naruči vožnju</button>
                `;
                list.appendChild(item);
            }
        });

        if (driverMarkers.length === 0) {
            list.innerHTML += "<p>Nema dostupnih vozača u blizini.</p>";
        }
    }

    function getDistance(lat1, lon1, lat2, lon2) {
        const R = 6371; // Radius Zemlje u km
        const dLat = (lat2 - lat1) * Math.PI / 180;
        const dLon = (lon2 - lon1) * Math.PI / 180;
        const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                    Math.sin(dLon / 2) * Math.sin(dLon / 2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        return R * c;
    }

    function getETA(distanceKm) {
        const speedKmH = 60;
        const timeHours = distanceKm / speedKmH;
        const timeMinutes = Math.round(timeHours * 60);
        return timeMinutes;
    }


    async function naruciVoznju(driverId, driverName) {
        console.log("Pozvana funkcija naruciVoznju.");
        console.log("Driver ID:", driverId);
        console.log("Driver Name:", driverName);
        const pocetnaAdresa = document.getElementById("locationInput").value.trim();
        const odredisnaAdresa = document.getElementById("destinationInput").value.trim();

        if (!pocetnaAdresa) {
            showNotification("general-notification-section", "Molimo unesite početnu adresu.", true); // Zamijenjen alert
            return;
        }

        const putnikId = "@(User.Identity.IsAuthenticated ? User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value : string.Empty)";

        if (!putnikId) {
            showNotification("general-notification-section", "Korisnik nije prijavljen. Ne možete naručiti vožnju.", true); // Zamijenjen alert
            return;
        }

        const requestData = {
            DriverId: driverId,
            PutnikId: putnikId,
            PocetnaAdresa: pocetnaAdresa,
            OdredisnaAdresa: odredisnaAdresa === "" ? null : odredisnaAdresa
        };

        try {
            const response = await fetch('/Voznja/Naruci', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': '@Html.AntiForgeryToken()'
                },
                body: JSON.stringify(requestData)
            });

            if (response.ok) {
                const result = await response.json();
                const driverLatLng = dostupniVozači.find(v => v.id === driverId);
                 const message = `Uspješno ste naručili vožnju kod vozača: ${driverName}. Očekujte potvrdu! Status: ${result.status}`;
                     showNotification("general-notification-section", message);
            } else {
                let errorMessage = "Nepoznata greška prilikom naručivanja vožnje.";
                try {
                    const errorData = await response.json();
                    errorMessage = errorData.message || response.statusText;
                } catch (jsonError) {
                    const responseText = await response.text();
                    errorMessage = `Greška u odgovoru servera (status ${response.status}): ${responseText || 'Prazan odgovor'}`;
                    console.error("Greška pri parsiranju JSON odgovora:", jsonError, "Raw response:", responseText);
                }
                showNotification("general-notification-section", `Greška prilikom naručivanja vožnje: ${errorMessage}`, true); // Zamijenjen alert
            }
        } catch (error) {
            console.error("Greška prilikom slanja zahtjeva:", error);
            showNotification("general-notification-section", "Došlo je do greške prilikom naručivanja vožnje.", true); // Zamijenjen alert
        }
    }

    document.getElementById("locateBtn").addEventListener("click", () => {
        if (!navigator.geolocation) {
            showNotification("general-notification-section", "Geolokacija nije podržana u vašem pretraživaču.", true); // Zamijenjen alert
            return;
        }

        navigator.geolocation.getCurrentPosition(async position => {
            const userLat = position.coords.latitude;
            const userLng = position.coords.longitude;

            if (!map) {
                map = L.map('map').setView([userLat, userLng], 14);
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '&copy; OpenStreetMap contributors'
                }).addTo(map);
            } else {
                map.setView([userLat, userLng], 14);
            }

            if (userMarker) {
                userMarker.setLatLng([userLat, userLng]);
            } else {
                userMarker = L.marker([userLat, userLng]).addTo(map).bindPopup("Vaša lokacija").openPopup();
            }

            try {
                const reverseGeoResponse = await fetch(`https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${userLat}&lon=${userLng}`);
                const reverseGeoData = await reverseGeoResponse.json();

                if (reverseGeoData && reverseGeoData.display_name) {
                    document.getElementById("locationInput").value = reverseGeoData.display_name;
                } else {
                    document.getElementById("locationInput").value = `${userLat.toFixed(4)}, ${userLng.toFixed(4)}`; // Fallback to coordinates
                }
            } catch (error) {
                console.error("Greška pri dohvaćanju adrese lokacije:", error);
                document.getElementById("locationInput").value = `${userLat.toFixed(4)}, ${userLng.toFixed(4)}`; // Fallback to coordinates
            }

            try {
                const driverResponse = await fetch(`/Vozac/PrikazSlobodnihVozaca?location=${userLat},${userLng}`);
                const driversData = await driverResponse.json();
                showNearbyDrivers(userLat, userLng, driversData);
            } catch (error) {
                console.error("Greška pri dohvaćanju vozača:", error);
                showNotification("general-notification-section", "Greška pri dohvaćanju vozača.", true); // Zamijenjen alert
            }

        }, error => {
            showNotification("general-notification-section", "Neuspješno lociranje: " + error.message, true); // Zamijenjen alert
        });
    });
</script>