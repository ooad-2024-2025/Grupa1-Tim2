@{
    ViewData["Title"] = "Pronađi vozače";
}

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #d4f4dd;
        margin: 20px;
    }

    #map {
        height: 400px;
        width: 70%;
        float: left;
        border-radius: 10px;
        margin-top: 20px;
        background-color: white;
    }

    #driver-list {
        width: 28%;
        float: right;
        padding-left: 2%;
        margin-top: 20px;
        background-color: white;
        border-radius: 10px;
        padding: 15px;
        box-sizing: border-box;
    }

    .driver-item {
        background-color: #f8f8f8;
        padding: 10px;
        margin-bottom: 10px;
        border-radius: 8px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }

    .order-button {
        background-color: #2ecc71;
        color: white;
        border: none;
        padding: 6px 12px;
        border-radius: 5px;
        cursor: pointer;
        margin-top: 8px;
    }

        .order-button:hover {
            background-color: #27ae60;
        }

    #location-container {
        background-color: #b8e4bb;
        padding: 20px 25px;
        border-radius: 8px;
        margin-bottom: 30px;
        display: inline-block;
    }

    h2 {
        margin-bottom: 10px;
    }

    #locationInput {
        width: 300px;
        padding: 8px;
        margin-right: 10px;
        border-radius: 5px;
        border: 1px solid #ccc;
        font-size: 1rem;
    }

    #findBtn, #locateBtn {
        padding: 8px 12px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1rem;
        font-family: inherit;
        color: white;
        transition: background-color 0.3s ease;
    }

    #findBtn {
        background-color: #3498db;
    }

        #findBtn:hover {
            background-color: #2980b9;
        }

    #locateBtn {
        background-color: #7f8c8d;
    }

        #locateBtn:hover {
            background-color: #636e72;
        }
</style>

<h2>Unesite svoju lokaciju</h2>
<div id="location-container">
    <input type="text" id="locationInput" placeholder="npr. Pofalići" />
    <input type="text" id="destinationInput" placeholder="npr. Baščaršija (Odredišna Adresa - opcionalno)" />
   <button id="findBtn" onclick="PrikazSlobodnihVozaca()">Pronađi vozače</button>
    <button id="locateBtn" type="button">Pronađi moju lokaciju</button>
</div>

<div>
    <div id="map"></div>
    <div id="driver-list"><h3>Vozači u blizini</h3></div>
</div>

<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

<script>
    let map;
    let userMarker;
    let driverMarkers = [];

    async function PrikazSlobodnihVozaca() {
        const location = document.getElementById("locationInput").value.trim();



        if (!location) {
            alert("Molimo unesite lokaciju.");
            return;
        }

        try {
            const geoResponse = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(location)}`);
            const geoData = await geoResponse.json();

            if (geoData.length === 0) {
                alert("Lokacija nije pronađena.");
                return;
            }

            const userLat = parseFloat(geoData[0].lat);
            const userLng = parseFloat(geoData[0].lon);

            if (!map) {
                map = L.map('map').setView([userLat, userLng], 14);
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '&copy; OpenStreetMap contributors'
                }).addTo(map);
            } else {
                map.setView([userLat, userLng], 14);
            }

            if (userMarker) {
                userMarker.setLatLng([userLat, userLng]);
            } else {
                userMarker = L.marker([userLat, userLng]).addTo(map).bindPopup("Vaša lokacija").openPopup();
            }

            const driverResponse = await fetch(`/Vozac/PrikazSlobodnihVozaca?location=${encodeURIComponent(location)}`);
            const driversData = await driverResponse.json();

            showNearbyDrivers(userLat, userLng, driversData);

        } catch (error) {
            console.error("Greška:", error);
            alert("Greška prilikom pretrage.");
        }
    }

    function showNearbyDrivers(userLat, userLng, drivers) {
        const list = document.getElementById("driver-list");
        list.innerHTML = "<h3>Vozači u blizini</h3>";

        driverMarkers.forEach(m => map.removeLayer(m));
        driverMarkers = [];

        const dostupni = drivers.filter(driver => driver.dostupnost === 1);

        if (dostupni.length === 0) {
            list.innerHTML += "<p>Nema dostupnih vozača.</p>";
            return;
        }

        dostupni.forEach(driver => {
            if (driver.latitude == null || driver.longitude == null) return;

            const distance = getDistance(userLat, userLng, driver.latitude, driver.longitude);

            if (distance <= 50) {
                const marker = L.marker([driver.latitude, driver.longitude]).addTo(map).bindPopup(driver.name);
                driverMarkers.push(marker);

                const item = document.createElement("div");
                item.className = "driver-item";
                item.innerHTML = `
                    <strong>${driver.name}</strong> (${distance.toFixed(2)} km)<br/>
                    <button class="order-button" onclick="naruciVoznju('${driver.id}', '${driver.name}')">Naruči vožnju</button>
                `;
                list.appendChild(item);
            }
        });

        if (driverMarkers.length === 0) {
            list.innerHTML += "<p>Nema dostupnih vozača u blizini.</p>";
        }
    }

    function getDistance(lat1, lon1, lat2, lon2) {
        const R = 6371;
        const dLat = (lat2 - lat1) * Math.PI / 180;
        const dLon = (lon2 - lon1) * Math.PI / 180;
        const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                  Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                  Math.sin(dLon / 2) * Math.sin(dLon / 2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        return R * c;
    }

    // Glavna funkcija za naručivanje vožnje (Ažurirana za slanje zahtjeva kontroleru)
    async function naruciVoznju(driverId, driverName) {

        console.log("Pozvana funkcija naruciVoznju."); // DODAJ OVU LINIJU
    console.log("Driver ID:", driverId); // DODAJ OVU LINIJU
    console.log("Driver Name:", driverName); // DODAJ OVU LINIJU
        const pocetnaAdresa = document.getElementById("locationInput").value.trim();
        const odredisnaAdresa = document.getElementById("destinationInput").value.trim(); // Dohvati odredišnu adresu

        if (!pocetnaAdresa) {
            alert("Molimo unesite početnu adresu.");
            return;
        }

        // Dohvati ID trenutno logiranog korisnika (putnika)
        // @(User.Identity.IsAuthenticated ? User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value : string.Empty)
        // Ovaj dio Blade sintakse će biti renderovan na serveru u stvarni putnikId string
        const putnikId = "@(User.Identity.IsAuthenticated ? User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value : string.Empty)";

        if (!putnikId) {
            alert("Korisnik nije prijavljen. Ne možete naručiti vožnju.");
            return;
        }

        const requestData = {
            DriverId: driverId,
            PutnikId: putnikId,
            PocetnaAdresa: pocetnaAdresa,
            // Ako je odredisnaAdresa prazan string, pošalji null, inače pošalji vrijednost
            OdredisnaAdresa: odredisnaAdresa === "" ? null : odredisnaAdresa
        };

        try {
            // Slanje POST zahtjeva na Naruci akciju u VoznjaControlleru
            const response = await fetch('/Voznja/Naruci', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    // Dodavanje anti-forgery tokena za sigurnost (ako ga koristiš na serveru)
                    'RequestVerificationToken': '@Html.AntiForgeryToken()'
                },
                body: JSON.stringify(requestData)
            });

            if (response.ok) {
                const result = await response.json();
                alert(`Uspješno ste naručili vožnju kod vozača: ${driverName}. Status: ${result.status}`);
                // Ovdje možete dodati daljnju logiku, npr. osvježiti listu vozača, preusmjeriti korisnika itd.
            } else {
                const errorData = await response.json();
                alert(`Greška prilikom naručivanja vožnje: ${errorData.message || response.statusText}`);
            }
        } catch (error) {
            console.error("Greška prilikom slanja zahtjeva:", error);
            alert("Došlo je do greške prilikom naručivanja vožnje.");
        }
    }

    document.getElementById("locateBtn").addEventListener("click", () => {
        if (!navigator.geolocation) {
            alert("Geolokacija nije podržana.");
            return;
        }

        navigator.geolocation.getCurrentPosition(async position => {
            const userLat = position.coords.latitude;
            const userLng = position.coords.longitude;

            if (!map) {
                map = L.map('map').setView([userLat, userLng], 14);
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '&copy; OpenStreetMap contributors'
                }).addTo(map);
            } else {
                map.setView([userLat, userLng], 14);
            }

            if (userMarker) {
                userMarker.setLatLng([userLat, userLng]);
            } else {
                userMarker = L.marker([userLat, userLng]).addTo(map).bindPopup("Vaša lokacija").openPopup();
            }

            try {
                const driverResponse = await fetch(`/Vozac/PrikazSlobodnihVozaca?location=current`);
                const driversData = await driverResponse.json();
                showNearbyDrivers(userLat, userLng, driversData);
            } catch (error) {
                alert("Greška pri dohvaćanju vozača.");
            }

        }, error => {
            alert("Neuspješno lociranje: " + error.message);
        });
    });
</script>
